name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

# Permissões necessárias (release + security scanning)
permissions:
  contents: write
  security-events: write

env:
  GO_VERSION: '1.24.x'
  BINARY_NAME: 'harborctl'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Go vet
        run: go vet ./...

      - name: Run tests (race + coverage)
        run: go test -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Govulncheck (oficial)
        uses: golang/govulncheck-action@v1

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  build:
    name: Build Binaries
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
            ext: ""
            archive_ext: tar.gz
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
            ext: ""
            archive_ext: tar.gz
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
            ext: ""
            archive_ext: tar.gz
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
            ext: ""
            archive_ext: tar.gz
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
            archive_ext: zip
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64
            ext: .exe
            archive_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Build binary (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p build dist
          # Saída simples (sem sufixo OS/ARCH dentro do pacote)
          OUT="build/${{ env.BINARY_NAME }}${{ matrix.ext }}"
          go build -trimpath -ldflags="-s -w" -o "$OUT" .

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          ARCHIVE="${{ env.BINARY_NAME }}_${TAG}_${{ matrix.os }}_${{ matrix.arch }}"
          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            (cd build && zip -9 "../dist/${ARCHIVE}.zip" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          else
            (cd build && tar -czf "../dist/${ARCHIVE}.tar.gz" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          fi
          ls -lah dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets (flatten + checksums)
        run: |
          set -euo pipefail
          cd dist
          # Mover todos os arquivos para o diretório raiz de dist/
          find . -type f -name "*.tar.gz" -exec mv -f {} . \; || true
          find . -type f -name "*.zip"    -exec mv -f {} . \; || true
          # Limpar subpastas criadas pelo download-artifact
          find . -mindepth 1 -type d -exec rm -rf {} + || true
          # Gerar checksums
          sha256sum *.tar.gz *.zip > checksums.txt
          ls -lah

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          body: |
            ## Harbor CLI ${{ github.ref_name }}

            ### Instalação rápida

            **Linux (amd64/arm64):**
            ```bash
            OS=linux
            ARCH=$(uname -m); [[ "$ARCH" == "x86_64" ]] && ARCH=amd64
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${OS}_${ARCH}.tar.gz -o ${OS}-${ARCH}.tgz
            tar -xzf ${OS}-${ARCH}.tgz ${BINARY_NAME}
            sudo install -m 0755 ${BINARY_NAME} /usr/local/bin/${BINARY_NAME}
            ${BINARY_NAME} --version
            ```

            **macOS (amd64/arm64):**
            ```bash
            OS=darwin
            ARCH=$(uname -m); [[ "$ARCH" == "x86_64" ]] && ARCH=amd64
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${OS}_${ARCH}.tar.gz -o ${OS}-${ARCH}.tgz
            tar -xzf ${OS}-${ARCH}.tgz ${BINARY_NAME}
            sudo install -m 0755 ${BINARY_NAME} /usr/local/bin/${BINARY_NAME}
            ${BINARY_NAME} --version
            ```

            **Windows (amd64/arm64) – PowerShell:**
            ```powershell
            $OS = "windows"
            $ARCH = (Get-CimInstance Win32_Processor).Architecture -eq 12 ? "arm64" : "amd64"
            $Name = "${{ env.BINARY_NAME }}_${{ github.ref_name }}_${OS}_$ARCH.zip"
            Invoke-WebRequest "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$Name" -OutFile $Name
            Expand-Archive $Name -DestinationPath .
            .\${{ env.BINARY_NAME }}.exe --version
            ```

            ### Verificar integridade
            Baixe `checksums.txt` e verifique:
            ```bash
            curl -sSLf -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt
            sha256sum --ignore-missing -c checksums.txt
            ```
