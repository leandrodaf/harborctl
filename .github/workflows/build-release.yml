name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: write
  security-events: write

env:
  GO_VERSION: '1.24.x'
  BINARY_NAME: 'harborctl'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          # cache is enabled by default; we help with multiple paths
          cache-dependency-path: |
            go.sum
            **/go.sum
            go.work.sum

      - name: Go vet
        run: go vet ./...

      # Modern coverage via GOCOVERDIR (aggregates multi-package)
      - name: Run tests (race + coverage dir)
        run: |
          set -euo pipefail
          rm -rf cover
          mkdir -p cover
          export GOCOVERDIR="$PWD/cover"
          go test -race ./...
          # Generate consolidated coverage.out if there's data
          if [ -d "$GOCOVERDIR" ] && [ -n "$(ls -A "$GOCOVERDIR" 2>/dev/null || true)" ]; then
            go tool covdata textfmt -i="$GOCOVERDIR" -o coverage.out
          else
            echo "no coverage data" > coverage.out
          fi

      - name: Govulncheck (official)
        uses: golang/govulncheck-action@v1
        continue-on-error: true

      - name: Upload coverage
        if: always() && hashFiles('coverage.out') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
          if-no-files-found: warn
        continue-on-error: true

  build:
    name: Build Binaries
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - os: linux   # Linux amd64
            arch: amd64
            goos: linux
            goarch: amd64
            ext: ""
            archive_ext: tar.gz
          - os: linux   # Linux arm64
            arch: arm64
            goos: linux
            goarch: arm64
            ext: ""
            archive_ext: tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache-dependency-path: |
            go.sum
            **/go.sum
            go.work.sum

      - name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          set -euo pipefail
          mkdir -p build dist
          OUT="build/${{ env.BINARY_NAME }}${{ matrix.ext }}"
          
          # Build info for ldflags
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse HEAD)
          VERSION_INFO="${GITHUB_REF_NAME}"
          
          # Build with version information
          go build -trimpath -ldflags="-s -w -X main.version=${VERSION_INFO} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" -o "$OUT" ./cmd/harborctl

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          ARCHIVE="${{ env.BINARY_NAME }}_${TAG}_${{ matrix.os }}_${{ matrix.arch }}"
          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            (cd build && zip -9 "../dist/${ARCHIVE}.zip" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          else
            (cd build && tar -czf "../dist/${ARCHIVE}.tar.gz" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          fi
          ls -lah dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/${{ env.BINARY_NAME }}${{ matrix.ext }}
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.zip
          if-no-files-found: ignore
        continue-on-error: true

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
        continue-on-error: true

      - name: Prepare release assets (flatten + checksums)
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          
          echo "=== Initial directory structure ==="
          find . -type f -name "*" | head -20
          
          # Move compressed files to root directory
          find . -type f -name "*.tar.gz" -exec mv -f {} . \; || true
          find . -type f -name "*.zip"    -exec mv -f {} . \; || true
          
          # Copy direct binaries more explicitly
          echo "=== Looking for binaries ==="
          find . -name "${{ env.BINARY_NAME }}" -type f | while read -r binary; do
            echo "Found binary: $binary"
            if [[ "$binary" == *"amd64"* ]]; then
              echo "Copying amd64 binary"
              cp "$binary" "${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64"
              # Create latest alias for updates
              cp "$binary" "${{ env.BINARY_NAME }}_latest_linux_amd64"
            elif [[ "$binary" == *"arm64"* ]]; then
              echo "Copying arm64 binary"
              cp "$binary" "${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64"
              # Create latest alias for updates
              cp "$binary" "${{ env.BINARY_NAME }}_latest_linux_arm64"
            fi
          done
          
          # Remove temporary directories
          find . -mindepth 1 -type d -exec rm -rf {} + || true
          
          echo "=== Final files ==="
          ls -lah
          
          # Generate checksums for all files
          shopt -s nullglob
          files=( *.tar.gz *.zip ${{ env.BINARY_NAME }}_* )
          if (( ${#files[@]} )); then
            sha256sum "${files[@]}" > checksums.txt
          else
            echo "no assets" > checksums.txt
          fi
          
          echo "=== Checksums ==="
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64
            dist/${{ env.BINARY_NAME }}_latest_linux_amd64
            dist/${{ env.BINARY_NAME }}_latest_linux_arm64
            dist/checksums.txt
          body: |
            ## Harbor CLI ${{ github.ref_name }}

            **HarborCtl** is a command-line tool for managing and deploying services using Docker Compose with advanced features.

            ### 📥 Installation

            #### Super Quick Installation (Direct Binary)

            **For amd64 (Intel/AMD):**
            ```bash
            sudo curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64 -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            **For arm64 (ARM64):**
            ```bash
            sudo curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64 -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            #### Automatic Installation (Compressed Archive)

            **For amd64 (Intel/AMD):**
            ```bash
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64.tar.gz | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            **For arm64 (ARM64/Apple Silicon on Linux servers):**
            ```bash
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64.tar.gz | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            #### Manual Installation

            1. **Download the file for your architecture:**
               ```bash
               # For amd64
               wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64.tar.gz
               
               # For arm64
               wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64.tar.gz
               ```

            2. **Extract and install:**
               ```bash
               # Replace FILENAME.tar.gz with the downloaded file
               tar -xzf FILENAME.tar.gz
               sudo mv ${{ env.BINARY_NAME }} /usr/local/bin/
               sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
               ```

            #### Auto-detect Architecture

            If you don't know your architecture, use this command that automatically detects it:
            ```bash
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
            esac
            
            curl -sSLf "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_${ARCH}.tar.gz" | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            #### For Scripts and Automation

            **Automated Installation Script (Recommended)**

            Use our comprehensive installation script for the best experience:
            ```bash
            # Install latest version with automatic architecture detection
            curl -sSLf https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install-harborctl.sh | bash

            # Or with wget
            wget -qO- https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install-harborctl.sh | bash

            # Install specific version
            curl -sSLf https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install-harborctl.sh | bash -s -- --version ${{ github.ref_name }}

            # Force reinstall
            curl -sSLf https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install-harborctl.sh | bash -s -- --force
            ```

            **Direct binary download (no decompression needed):**
            ```bash
            # Auto-detect architecture and download direct binary
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
            esac
            
            # Download for local use (doesn't install system-wide)
            curl -sSLf "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_${ARCH}" -o ${{ env.BINARY_NAME }}
            chmod +x ${{ env.BINARY_NAME }}
            ./${{ env.BINARY_NAME }} --version
            ```

            **For CI/CD and containers:**
            ```bash
            # In Dockerfile or CI/CD scripts
            RUN curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64 -o /usr/local/bin/${{ env.BINARY_NAME }} && chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            ### ✅ Verify Installation

            After installation, verify it worked:
            ```bash
            ${{ env.BINARY_NAME }} --version
            ${{ env.BINARY_NAME }} --help
            ```

            ### 🔒 Integrity Verification (Optional)

            To verify the integrity of downloaded files:
            ```bash
            # Download the checksums file
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt
            
            # Verify the downloaded file
            sha256sum -c checksums.txt --ignore-missing
            ```

            ### � Update/Upgrade

            #### Update to Latest Version
            To update to the latest version, simply run the installation command again:
            ```bash
            # Auto-detect and update
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
            esac
            
            sudo curl -sSLf "https://github.com/${{ github.repository }}/releases/latest/download/${{ env.BINARY_NAME }}_latest_linux_${ARCH}" -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            #### Force Update (Overwrite)
            If you need to force an update or reinstall:
            ```bash
            # Remove current version first
            sudo rm -f /usr/local/bin/${{ env.BINARY_NAME }}
            
            # Install latest version
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
            esac
            
            sudo curl -sSLf "https://github.com/${{ github.repository }}/releases/latest/download/${{ env.BINARY_NAME }}_latest_linux_${ARCH}" -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            #### Update Script (One-liner)
            Create an update script for easy updates:
            ```bash
            # Create update script
            cat > update-harborctl.sh << 'EOF'
            #!/bin/bash
            set -euo pipefail

            echo "🔄 Updating HarborCtl..."

            # Check current version
            if command -v ${{ env.BINARY_NAME }} >/dev/null 2>&1; then
                echo "📋 Current version: $(${{ env.BINARY_NAME }} --version 2>/dev/null || echo 'unknown')"
            else
                echo "📋 HarborCtl not found, installing..."
            fi

            # Detect architecture
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "❌ Unsupported architecture: $ARCH" && exit 1 ;;
            esac

            echo "🏗️  Architecture detected: $ARCH"

            # Download and install
            echo "⬇️  Downloading latest version..."
            sudo curl -sSLf "https://github.com/${{ github.repository }}/releases/latest/download/${{ env.BINARY_NAME }}_latest_linux_${ARCH}" -o /usr/local/bin/${{ env.BINARY_NAME }}
            sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}

            echo "✅ Update completed!"
            echo "📋 New version: $(${{ env.BINARY_NAME }} --version)"
            EOF

            chmod +x update-harborctl.sh
            ./update-harborctl.sh
            ```

            #### Check for Updates
            To check if there's a new version available:
            ```bash
            # Get current version
            CURRENT_VERSION=$(${{ env.BINARY_NAME }} --version 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' || echo "unknown")

            # Get latest version from GitHub
            LATEST_VERSION=$(curl -sSLf https://api.github.com/repos/${{ github.repository }}/releases/latest | grep -oE '"tag_name": "v[0-9]+\.[0-9]+\.[0-9]+"' | cut -d'"' -f4)

            echo "Current version: $CURRENT_VERSION"
            echo "Latest version:  $LATEST_VERSION"

            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
                echo "🔄 Update available!"
            else
                echo "✅ You have the latest version"
            fi
            ```

            ### �🗑️ Uninstallation

            To remove HarborCtl:
            ```bash
            sudo rm /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            ### 📋 System Requirements

            - **OS:** Linux (any distribution)
            - **Architecture:** amd64 (x86_64) or arm64 (aarch64)
            - **Permissions:** sudo/root for installation in `/usr/local/bin`

            ### 🚀 Getting Started

            After installation, check the documentation to get started:
            ```bash
            ${{ env.BINARY_NAME }} docs
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
