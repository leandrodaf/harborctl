name: 🚀 Build and Release Harbor CLI

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.21'
  BINARY_NAME: 'harborctl'

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: 📦 Download dependencies
      run: go mod download
    
    - name: 🔍 Run tests
      run: go test -v ./...
    
    - name: 🔍 Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: 🏗️ Build
      run: go build -v ./cmd/harborctl

  build:
    name: 🏗️ Build Binaries
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: 🏗️ Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}-${{ github.sha }}" \
          -o dist/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
          ./cmd/harborctl
    
    - name: 📦 Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  release:
    name: 🎉 Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist
    
    - name: 📋 Prepare release assets
      run: |
        cd dist
        # Reorganizar arquivos
        find . -name "${{ env.BINARY_NAME }}-*" -type f -exec mv {} . \;
        find . -mindepth 2 -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Criar checksums
        sha256sum ${{ env.BINARY_NAME }}-* > checksums.txt
        
        # Mostrar arquivos
        ls -la
    
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
        files: |
          dist/${{ env.BINARY_NAME }}-*
          dist/checksums.txt
        body: |
          ## 🚀 Harbor CLI ${{ github.ref_name }}
          
          ### 📦 Instalação Rápida
          
          ```bash
          # Linux x64
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}-linux-amd64 -o harborctl
          chmod +x harborctl
          sudo mv harborctl /usr/local/bin/
          
          # macOS x64
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}-darwin-amd64 -o harborctl
          chmod +x harborctl
          sudo mv harborctl /usr/local/bin/
          
          # Windows x64
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}-windows-amd64.exe -o harborctl.exe
          ```
          
          ### ✅ Verificar Instalação
          
          ```bash
          harborctl --version
          ```
          
          ### 📚 Documentação
          
          - [Quick Start](https://github.com/${{ github.repository }}/blob/main/docs/QUICK_START.md)
          - [Guia Completo](https://github.com/${{ github.repository }}/blob/main/docs/GUIDE.md)
          
          ### 🔍 Checksums
          
          Para verificar integridade dos binários, use o arquivo `checksums.txt`.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-install-script:
    name: 📝 Update Install Script
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Update install script version
      run: |
        # Atualizar versão no script de instalação se necessário
        sed -i "s/VERSION=.*/VERSION=\"${{ github.ref_name }}\"/g" scripts/install.sh || true
    
    - name: 💾 Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scripts/install.sh
        git diff --staged --quiet || git commit -m "chore: update install script for ${{ github.ref_name }}"
        git push || true
