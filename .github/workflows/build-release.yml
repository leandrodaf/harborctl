name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: write
  security-events: write

env:
  GO_VERSION: '1.24.x'
  BINARY_NAME: 'harborctl'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          # cache é habilitado por padrão; ajudamos com múltiplos caminhos
          cache-dependency-path: |
            go.sum
            **/go.sum
            go.work.sum

      - name: Go vet
        run: go vet ./...

      # Cobertura moderna via GOCOVERDIR (agrega multi-pacote)
      - name: Run tests (race + coverage dir)
        run: |
          set -euo pipefail
          rm -rf cover
          mkdir -p cover
          export GOCOVERDIR="$PWD/cover"
          go test -race ./...
          # Gera coverage.out consolidado se houver dados
          if [ -d "$GOCOVERDIR" ] && [ -n "$(ls -A "$GOCOVERDIR" 2>/dev/null || true)" ]; then
            go tool covdata textfmt -i="$GOCOVERDIR" -o coverage.out
          else
            echo "no coverage data" > coverage.out
          fi

      - name: Govulncheck (oficial)
        uses: golang/govulncheck-action@v1
        continue-on-error: true

      - name: Upload coverage
        if: always() && hashFiles('coverage.out') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
          if-no-files-found: warn
        continue-on-error: true

  build:
    name: Build Binaries
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - os: linux   # Linux amd64
            arch: amd64
            goos: linux
            goarch: amd64
            ext: ""
            archive_ext: tar.gz
          - os: linux   # Linux arm64
            arch: arm64
            goos: linux
            goarch: arm64
            ext: ""
            archive_ext: tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache-dependency-path: |
            go.sum
            **/go.sum
            go.work.sum

      - name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          set -euo pipefail
          mkdir -p build dist
          OUT="build/${{ env.BINARY_NAME }}${{ matrix.ext }}"
          go build -trimpath -ldflags="-s -w" -o "$OUT" ./cmd/harborctl

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          ARCHIVE="${{ env.BINARY_NAME }}_${TAG}_${{ matrix.os }}_${{ matrix.arch }}"
          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            (cd build && zip -9 "../dist/${ARCHIVE}.zip" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          else
            (cd build && tar -czf "../dist/${ARCHIVE}.tar.gz" "${{ env.BINARY_NAME }}${{ matrix.ext }}")
          fi
          ls -lah dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/${{ env.BINARY_NAME }}${{ matrix.ext }}
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}.zip
          if-no-files-found: ignore
        continue-on-error: true

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
        continue-on-error: true

      - name: Prepare release assets (flatten + checksums)
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          # Move arquivos compactados para o diretório raiz
          find . -type f -name "*.tar.gz" -exec mv -f {} . \; || true
          find . -type f -name "*.zip"    -exec mv -f {} . \; || true
          
          # Copia binários diretos e renomeia para facilitar download
          find . -name "${{ env.BINARY_NAME }}" -type f -exec cp {} ${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64 \; || true
          find . -name "${{ env.BINARY_NAME }}" -type f -path "*arm64*" -exec cp {} ${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64 \; || true
          
          # Remove diretórios temporários
          find . -mindepth 1 -type d -exec rm -rf {} + || true
          
          # Gera checksums para todos os arquivos
          shopt -s nullglob
          files=( *.tar.gz *.zip ${{ env.BINARY_NAME }}_* )
          if (( ${#files[@]} )); then
            sha256sum "${files[@]}" > checksums.txt
          else
            echo "no assets" > checksums.txt
          fi
          ls -lah

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64
            dist/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64
            dist/checksums.txt
          body: |
            ## Harbor CLI ${{ github.ref_name }}

            **HarborCtl** é uma ferramenta de linha de comando para gerenciar e implantar serviços usando Docker Compose com funcionalidades avançadas.

            ### 📥 Instalação

            #### Instalação Super Rápida (Binário Direto)

            **Para amd64 (Intel/AMD):**
            ```bash
            sudo curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64 -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            **Para arm64 (ARM64):**
            ```bash
            sudo curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64 -o /usr/local/bin/${{ env.BINARY_NAME }} && sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            #### Instalação Automática (Arquivo Compactado)

            **Para amd64 (Intel/AMD):**
            ```bash
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64.tar.gz | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            **Para arm64 (ARM64/Apple Silicon em servidores Linux):**
            ```bash
            curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64.tar.gz | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            #### Instalação Manual

            1. **Baixe o arquivo para sua arquitetura:**
               ```bash
               # Para amd64
               wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64.tar.gz
               
               # Para arm64
               wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_arm64.tar.gz
               ```

            2. **Extraia e instale:**
               ```bash
               # Substitua ARQUIVO.tar.gz pelo arquivo baixado
               tar -xzf ARQUIVO.tar.gz
               sudo mv ${{ env.BINARY_NAME }} /usr/local/bin/
               sudo chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
               ```

            #### Detectar Arquitetura Automaticamente

            Se não souber sua arquitetura, use este comando que detecta automaticamente:
            ```bash
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Arquitetura não suportada: $ARCH" && exit 1 ;;
            esac
            
            curl -sSLf "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_${ARCH}.tar.gz" | sudo tar -xzC /usr/local/bin ${{ env.BINARY_NAME }}
            ```

            #### Para Scripts e Automação

            **Download direto do binário (sem descompactação):**
            ```bash
            # Auto-detecta arquitetura e baixa o binário direto
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) ARCH="amd64" ;;
                aarch64|arm64) ARCH="arm64" ;;
                *) echo "Arquitetura não suportada: $ARCH" && exit 1 ;;
            esac
            
            # Download para uso local (não instala no sistema)
            curl -sSLf "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_${ARCH}" -o ${{ env.BINARY_NAME }}
            chmod +x ${{ env.BINARY_NAME }}
            ./${{ env.BINARY_NAME }} --version
            ```

            **Para CI/CD e containers:**
            ```bash
            # Em Dockerfile ou scripts CI/CD
            RUN curl -sSLf https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.BINARY_NAME }}_${{ github.ref_name }}_linux_amd64 -o /usr/local/bin/${{ env.BINARY_NAME }} && chmod +x /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            ### ✅ Verificar Instalação

            Após a instalação, verifique se funcionou:
            ```bash
            ${{ env.BINARY_NAME }} --version
            ${{ env.BINARY_NAME }} --help
            ```

            ### 🔒 Verificação de Integridade (Opcional)

            Para verificar a integridade dos arquivos baixados:
            ```bash
            # Baixe o arquivo de checksums
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt
            
            # Verifique o arquivo baixado
            sha256sum -c checksums.txt --ignore-missing
            ```

            ### 🗑️ Desinstalação

            Para remover o HarborCtl:
            ```bash
            sudo rm /usr/local/bin/${{ env.BINARY_NAME }}
            ```

            ### 📋 Requisitos do Sistema

            - **SO:** Linux (qualquer distribuição)
            - **Arquitetura:** amd64 (x86_64) ou arm64 (aarch64)
            - **Permissões:** sudo/root para instalação em `/usr/local/bin`

            ### 🚀 Primeiros Passos

            Após a instalação, consulte a documentação para começar:
            ```bash
            ${{ env.BINARY_NAME }} docs
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
